package types

// Code generated by generate_time_types.go; DO NOT EDIT.

//go:generate go run generate_time_types.go

import (
	"math"
	"strconv"
	"time"

	"github.com/hako/durafmt"
)

// Seconds is a type that handles JSON encoding/decoding a time.Duration by the number of
// time.Second's within it rounded down. This structure is auto-generated.
type Seconds time.Duration

// MarshalJSON implements the json.Marshaler interface.
func (x Seconds) MarshalJSON() ([]byte, error) {
	var val any = time.Duration(x).Seconds()
	var i int64
	switch y := val.(type) {
	case int64:
		i = y
	case float64:
		i = int64(math.Round(y))
	}
	return []byte(strconv.FormatInt(i, 10)), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (x *Seconds) UnmarshalJSON(b []byte) error {
	intVal, err := strconv.ParseInt(string(b), 10, 64)
	if err != nil {
		return err
	}
	*x = Seconds(time.Second * time.Duration(intVal))
	return nil
}

// String uses the durafmt package to neatly format the timestamp.
func (x Seconds) String() string {
	return durafmt.Parse(time.Duration(x)).String()
}

// SecondsFromInt is used to turn a int into the Seconds type.
func SecondsFromInt(i int) Seconds {
	return Seconds(time.Second * time.Duration(i))
}

// Milliseconds is a type that handles JSON encoding/decoding a time.Duration by the number of
// time.Millisecond's within it rounded down. This structure is auto-generated.
type Milliseconds time.Duration

// MarshalJSON implements the json.Marshaler interface.
func (x Milliseconds) MarshalJSON() ([]byte, error) {
	var val any = time.Duration(x).Milliseconds()
	var i int64
	switch y := val.(type) {
	case int64:
		i = y
	case float64:
		i = int64(math.Round(y))
	}
	return []byte(strconv.FormatInt(i, 10)), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (x *Milliseconds) UnmarshalJSON(b []byte) error {
	intVal, err := strconv.ParseInt(string(b), 10, 64)
	if err != nil {
		return err
	}
	*x = Milliseconds(time.Millisecond * time.Duration(intVal))
	return nil
}

// String uses the durafmt package to neatly format the timestamp.
func (x Milliseconds) String() string {
	return durafmt.Parse(time.Duration(x)).String()
}

// MillisecondsFromInt is used to turn a int into the Milliseconds type.
func MillisecondsFromInt(i int) Milliseconds {
	return Milliseconds(time.Millisecond * time.Duration(i))
}
